"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const readline_1 = __importDefault(require("readline"));
let temp;
function ppConsole(page) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield new Promise((resolve, reject) => {
            const prompt = "> ";
            const rl = readline_1.default.createInterface({
                input: process.stdin,
                output: process.stdout,
                prompt,
            });
            rl.prompt();
            rl.on("line", (line) => __awaiter(this, void 0, void 0, function* () {
                if (line === "exit") {
                    rl.close();
                    return resolve();
                }
                yield onLineInput(page, line);
                rl.prompt();
            }));
            rl.on("close", () => {
                rl.close();
                console.log("");
                resolve();
            });
        });
    });
}
exports.default = ppConsole;
function onLineInput(page, line) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const executeLine = `(async () => {return ${line}})()`;
            const result = eval(executeLine) || "";
            const output = result.constructor.name === "Promise" ? yield result : result;
            console.log(output);
        }
        catch (error) {
            console.log(error);
        }
    });
}
//# sourceMappingURL=index.js.map